--CREATE TABLE NORTH.X_CHURN_HISTORY_TO_SCORE AS

select
A.YEARMONTH,
A.ZKEY,
a.MON, 
a.DOM_TYPE_II, 
a.DIVISION_NAME, 
LN(a.CREDIT_LIMIT + 1) LCREDIT_LIMIT, 
a.OS_HA, 
A.TOTAL_USERS AS LAG_USERS,
a.USED_ACCTS_PAYABLE, a.USED_AVAIL_CHECK, a.USED_COPY_QUOTE, a.USED_MY_LIST, a.USED_OLBP, a.USED_ORDER_INQUIRE, 
a.USED_QUICK_ORDER, a.USED_REDEEM_PPP, a.USED_S2S_ORDER, a.USED_UPLOAD_SPREADSHEET, a.ACCEPT_PRO_PLUS, 
CASE WHEN a.HIST_MONTHS_TENURE > 60 THEN 60 ELSE a.HIST_MONTHS_TENURE END HIST_MONTHS_TENURE, 
CASE WHEN a.HIST_FOL_MON_TENURE > CASE WHEN a.HIST_MONTHS_TENURE > 60 THEN 60 ELSE a.HIST_MONTHS_TENURE END THEN CASE WHEN a.HIST_MONTHS_TENURE > 60 THEN 60 ELSE a.HIST_MONTHS_TENURE END ELSE a.HIST_FOL_MON_TENURE END HIST_FOL_MON_TENURE, 
a.PCT_TENURE_FOL, 
CASE WHEN a.CNT_ROLLING_MONTHS >12 THEN 12 ELSE a.CNT_ROLLING_MONTHS END CNT_ROLLING_MONTHS, 
a.LTOT_ROLLING_SLS, 
a.LROLLING_FOL_SLS, a.LROLLING_FOL_LINES, a.LROLLING_TOT_LINES, a.LROLLING_TOT_SSES, a.ROLLING_HV_SSES, 
a.ROLLING_SHARE_NON_SEARCH_SSES, 
CASE WHEN a.ROLLING_MDI > 200 THEN 200 ELSE a.ROLLING_MDI END ROLLING_MDI, 
CASE WHEN a.ROLLING_MAN_PCT >100 THEN 100 ELSE a.ROLLING_MAN_PCT END ROLLING_MAN_PCT, 
CASE WHEN a.ROLLING_JOB_PCT > 100 THEN 100 ELSE a.ROLLING_JOB_PCT END ROLLING_JOB_PCT, 
CASE WHEN a.ROLLING_FOL_SHR_SALES_PCT >100 THEN 100 ELSE a.ROLLING_FOL_SHR_SALES_PCT END ROLLING_FOL_SHR_SALES_PCT, 
CASE WHEN a.ROLLING_NET_BID_PCT >100 THEN 100 ELSE a.ROLLING_NET_BID_PCT END ROLLING_NET_BID_PCT, 
CASE WHEN a.ROLLING_FOL_BID_PCT >100 THEN 100 ELSE a.ROLLING_FOL_BID_PCT END ROLLING_FOL_BID_PCT, 
CASE WHEN a.ROLLING_FOL_JOB_PCT >100 THEN 100 ELSE a.ROLLING_FOL_JOB_PCT END ROLLING_FOL_JOB_PCT, 
CASE WHEN a.ROLLING_FOL_SHR_LINES_PCT >100 THEN 100 ELSE a.ROLLING_FOL_SHR_LINES_PCT END ROLLING_FOL_SHR_LINES_PCT, 
CASE WHEN a.MOVAVG_TOT_SLS_RATIO > 300 THEN 300 ELSE a.MOVAVG_TOT_SLS_RATIO END MOVAVG_TOT_SLS_RATIO ,
CASE WHEN a.MOVAVG_NETJOBSLS_RATIO > 300 THEN 300 ELSE a.MOVAVG_NETJOBSLS_RATIO END MOVAVG_NETJOBSLS_RATIO, 
CASE WHEN a.MOVAVG_FOL_SLS_RATIO > 300 THEN 300 ELSE a.MOVAVG_FOL_SLS_RATIO END MOVAVG_FOL_SLS_RATIO, 
CASE WHEN a.MOVAVG_NETNONBIDSLS_RATIO > 300 THEN 300 ELSE a.MOVAVG_NETNONBIDSLS_RATIO END MOVAVG_NETNONBIDSLS_RATIO, 
CASE WHEN a.MOVAVG_FOLNONBIDSLS_RATIO > 300 THEN 300 ELSE a.MOVAVG_FOLNONBIDSLS_RATIO END MOVAVG_FOLNONBIDSLS_RATIO, 
CASE WHEN a.MOVAVG_FOLJOBSLS_RATIO > 300 THEN 300 ELSE a.MOVAVG_FOLJOBSLS_RATIO END MOVAVG_FOLJOBSLS_RATIO, 
CASE WHEN a.MOVAVG_FOLLINES_RATIO > 300 THEN 300 ELSE a.MOVAVG_FOLLINES_RATIO END MOVAVG_FOLLINES_RATIO, 
CASE WHEN a.MOVAVG_TOTLINES_RATIO > 300 THEN 300 ELSE a.MOVAVG_TOTLINES_RATIO END MOVAVG_TOTLINES_RATIO, 
CASE WHEN a.MOVAVG_TOTSSE_RATIO > 300 THEN 300 ELSE a.MOVAVG_TOTSSE_RATIO END MOVAVG_TOTSSE_RATIO, 
a.DLOG_NET_SLS,
a.DLOG_FOL_SLS,
a.DLOG_NET_JOBSLS,
a.DLOG_NET_BIDSLS, 
a.DLOG_FOL_BIDSLS, 
a.DLOG_FOL_JOBSLS, 
a.DLOG_FOL_LINES, 
a.DLOG_TOT_LINES, 
a.DLOG_TOT_SSES, 
a.DLOG_HV_SSES, 
a.LLAG1_NET_SLS, a.LLAG1_FOL_SLS, a.TOT_MONTH_CONSEC, 
a.FOL_MONTH_CONSEC,
A.LLAG_VISITS,
A.LAG_ACCOUNTS_PAYABLE,
A.LAG_OLBP_BILLTRUST,
A.LAG_ORDER_INQUIRY,
A.LAG_REQUEST_QUOTE,
A.LAG_MY_LIST_ADDS,
A.LAG_MY_LIST_VIEWS,
A.LAG_UPLOAD_SPREADSHEET,
A.LAG_QUICK_ORDER,
A.LAG_AVAILABILITY_CHECKS,
A.LAG_REDEEM_PRO_PLUS_POINTS,
A.LAG_COPY_QUOTE,
A.LAG_CHANGE_JOB_ACCOUNT,
a.CUST_CHURN_CAT
from 
(
                  SELECT distinct
                  CASE  
                    WHEN 
                    CASE 
                    WHEN X.LM_FOL_CUSTOMER = 1 AND X.FOL_CUSTOMER = 1 THEN 0--'CONTINUED_CUST'
                    WHEN X.LM_FOL_CUSTOMER = 1 AND X.FOL_CUSTOMER = 0 THEN 1--'CHURNED_CUST'
                    ELSE -999--'OMIT'
                    END = -999 THEN 'OMIT'
                    WHEN X.MAX_YM_IN_SAMPLE = X.YEARMONTH THEN 'OMIT' 
                    ELSE 'KEEP' 
                  END FILTER,
                  X.YEARMONTH, 
                  X.MON, 
                  X.ZKEY, 
                  --X.CUSTOMER_TYPE, 
                  --X.PRICE_COLUMN, 
                  X.TOTAL_USERS,
                  X.DOM_TYPE_II, 
                  X.DIVISION_NAME, 
                  X.CREDIT_LIMIT, 
                  X.OS_HA, 
                  X.LAG_USERS,
                  X.LAG_ACTIVE_USERS,
                  X.LAG_ORDERING_USERS,
                  X.USED_ACCTS_PAYABLE, 
                  X.USED_AVAIL_CHECK, 
                  X.USED_COPY_QUOTE, 
                  X.USED_MY_LIST, 
                  X.USED_OLBP, 
                  X.USED_ORDER_INQUIRE, 
                  X.USED_QUICK_ORDER, 
                  X.USED_REDEEM_PPP, 
                  X.USED_S2S_ORDER, 
                  X.USED_UPLOAD_SPREADSHEET, 
                  X.ACCEPT_PRO_PLUS,
                  --X.MIN_YM_IN_SAMPLE, 
                  --X.MAX_YM_IN_SAMPLE,
                  CASE WHEN X.MIN_YM_IN_SAMPLE = X.YEARMONTH THEN 1 ELSE 0 END MIN_FOL_ORDER_YM,
                  CASE WHEN X.MAX_YM_IN_SAMPLE = X.YEARMONTH THEN 1 ELSE 0 END MAX_FOL_ORDER_YM,
                  --X.FOL_CUSTOMER, NOT LAGGED
                  --X.LM_FOL_CUSTOMER,
                  CASE 
                    WHEN X.LM_FOL_CUSTOMER = 1 AND X.FOL_CUSTOMER = 1 THEN 0--'CONTINUED_CUST'
                    WHEN X.LM_FOL_CUSTOMER = 1 AND X.FOL_CUSTOMER = 0 THEN 1--'CHURNED_CUST'
                    ELSE -999--'OMIT'
                  END CUST_CHURN_CAT,
                  X.HIST_MONTHS_TENURE, 
                  X.HIST_FOL_MON_TENURE, 
                  case when X.HIST_MONTHS_TENURE = 0 then 0 else ROUND(X.HIST_FOL_MON_TENURE/X.HIST_MONTHS_TENURE*100,2) end AS PCT_TENURE_FOL,
                  --X.HIST_NET_SLS, X.HIST_FOL_SLS, X.HIST_TOT_LINES, X.HIST_FOL_LINES, 
                  X.CNT_ROLLING_MONTHS, 
                  case when X.TOT_ROLLING_SLS < 1 then 0 else ln(X.TOT_ROLLING_SLS) end as LTOT_ROLLING_SLS, 
                  case when X.ROLLING_FOL_SLS <1 then 0 else LN(X.ROLLING_FOL_SLS) END AS LROLLING_FOL_SLS,
                  CASE WHEN X.ROLLING_FOL_LINES<1 THEN 0 ELSE LN(X.ROLLING_FOL_LINES) END AS LROLLING_FOL_LINES, 
                  CASE WHEN X.ROLLING_TOT_LINES<1 THEN 0 ELSE LN(X.ROLLING_TOT_LINES) END AS LROLLING_TOT_LINES,
                  CASE WHEN X.ROLLING_TOT_SSES<1 THEN 0 ELSE LN(X.ROLLING_TOT_SSES) END AS LROLLING_TOT_SSES, 
                  CASE WHEN (X.ROLLING_TOT_SSES - X.ROLLING_TOT_SEARCHES) <1 THEN 0 ELSE LN(X.ROLLING_TOT_SSES - X.ROLLING_TOT_SEARCHES) END AS ROLLING_HV_SSES,
                  CASE WHEN X.ROLLING_TOT_SSES <1 THEN 0 ELSE ROUND((1-X.ROLLING_TOT_SEARCHES/X.ROLLING_TOT_SSES),2) END AS ROLLING_SHARE_NON_SEARCH_SSES,
                  CASE WHEN X.TOT_ROLLING_SLS<1 THEN 0 WHEN X.ROLLING_PC_TOT_SLS<1 THEN 0 ELSE ROUND((CASE WHEN X.MAN_ROLLING_SLS <0 THEN 0 ELSE X.MAN_ROLLING_SLS/X.TOT_ROLLING_SLS END - CASE WHEN X.ROLLING_PC_MAN_SLS <0 THEN 0 ELSE X.ROLLING_PC_MAN_SLS/X.ROLLING_PC_TOT_SLS END)*100 + 100,2) END AS ROLLING_MDI,
                  CASE WHEN X.TOT_ROLLING_SLS<1 THEN 0 WHEN X.MAN_ROLLING_SLS <0 THEN 0 ELSE ROUND(X.MAN_ROLLING_SLS/X.TOT_ROLLING_SLS*100,2) END AS ROLLING_MAN_PCT,
                  CASE WHEN X.TOT_ROLLING_SLS<1 THEN 0 WHEN X.ROLLING_NET_JOB_SLS <0 THEN 0 ELSE ROUND(X.ROLLING_NET_JOB_SLS/X.TOT_ROLLING_SLS*100,2) END AS ROLLING_JOB_PCT,
                  CASE WHEN X.TOT_ROLLING_SLS<1 THEN 0 WHEN X.ROLLING_FOL_SLS <0 then 0 ELSE ROUND(X.ROLLING_FOL_SLS/X.TOT_ROLLING_SLS*100,2) END AS ROLLING_FOL_SHR_SALES_PCT,
                  CASE WHEN X.TOT_ROLLING_SLS<1 THEN 0 ELSE ROUND((1 - CASE WHEN X.ROLLING_NET_NONBID_SLS <0 THEN 0 ELSE X.ROLLING_NET_NONBID_SLS/X.TOT_ROLLING_SLS end)*100,2) END AS ROLLING_NET_BID_PCT,
                  CASE WHEN X.ROLLING_FOL_SLS<1 THEN 0 ELSE ROUND((1 - CASE WHEN X.ROLLING_FOL_NONBID_SLS<0 THEN 0 ELSE X.ROLLING_FOL_NONBID_SLS/X.ROLLING_FOL_SLS end)*100,2) END AS ROLLING_FOL_BID_PCT,
                  CASE WHEN X.ROLLING_FOL_SLS<1 THEN 0 when X.ROLLING_FOL_JOB_SLS <0 then 0 ELSE ROUND(X.ROLLING_FOL_JOB_SLS/X.ROLLING_FOL_SLS*100,2) END AS ROLLING_FOL_JOB_PCT,
                  CASE WHEN X.ROLLING_TOT_LINES<1 THEN 0 when X.ROLLING_FOL_LINES <0 then 0 ELSE ROUND(X.ROLLING_FOL_LINES/X.ROLLING_TOT_LINES*100,2) END AS ROLLING_FOL_SHR_LINES_PCT,
                  CASE WHEN X.TOT_MOVAVG_SLS<1 THEN 0 when X.LAG1_NET_SLS <0 then 0 ELSE ROUND(X.LAG1_NET_SLS/X.TOT_MOVAVG_SLS*100,2) END AS MOVAVG_TOT_SLS_RATIO,
                  --ROUND(X.MAN_MOVAVG_SLS/X.TOT_MOVAVG_SLS*100) as MOVAVG_MAN_PCT,
                  --ROUND(X.MOVAVG_PC_MAN_SLS/X.MOVAVG_PC_TOT_SLS*100) AS MOVAVG_PC_TOT_SLS,
                  CASE WHEN X.MOVAVG_NET_JOB_SLS <1 THEN 0 when X.LAG1_NET_JOB_SLS <0 then 0 ELSE ROUND( X.LAG1_NET_JOB_SLS/X.MOVAVG_NET_JOB_SLS*100,2) END AS MOVAVG_NETJOBSLS_RATIO,
                  CASE WHEN X.MOVAVG_FOL_SLS <1 THEN 0 when X.LAG1_FOL_SLS <0 then 0 else ROUND(X.LAG1_FOL_SLS/X.MOVAVG_FOL_SLS*100) END AS MOVAVG_FOL_SLS_RATIO,
                  CASE WHEN X.MOVAVG_NET_NONBID_SLS <1 THEN 0 when X.LAG1_NET_NONBID_SLS <0 then 0 ELSE ROUND(X.LAG1_NET_NONBID_SLS/X.MOVAVG_NET_NONBID_SLS*100) END AS MOVAVG_NETNONBIDSLS_RATIO,
                  CASE WHEN X.MOVAVG_FOL_NONBID_SLS <1 THEN 0 when X.LAG1_FOL_NONBID_SLS <0 then 0 ELSE ROUND(X.LAG1_FOL_NONBID_SLS/X.MOVAVG_FOL_NONBID_SLS*100) END AS MOVAVG_FOLNONBIDSLS_RATIO,
                  CASE WHEN X.MOVAVG_FOL_JOB_SLS <1 THEN 0 when X.LAG1_FOL_JOB_SLS <0 then 0 ELSE ROUND(X.LAG1_FOL_JOB_SLS/X.MOVAVG_FOL_JOB_SLS*100) END AS MOVAVG_FOLJOBSLS_RATIO,
                  CASE WHEN X.MOVAVG_FOL_LINES <1 THEN 0 when X.LAG1_FOL_LINES<0 then 0 ELSE ROUND(X.LAG1_FOL_LINES/X.MOVAVG_FOL_LINES*100) END AS MOVAVG_FOLLINES_RATIO,
                  CASE WHEN X.MOVAVG_TOT_LINES <1 THEN 0 when X.LAG1_TOT_LINES <0 then 0 ELSE ROUND(X.LAG1_TOT_LINES/X.MOVAVG_TOT_LINES*100) END AS MOVAVG_TOTLINES_RATIO,
                  CASE WHEN X.MOVAVG_TOT_SSES <1 THEN 0 when X.LAG1_TOT_SSES <0 then 0 ELSE ROUND(X.LAG1_TOT_SSES/X.MOVAVG_TOT_SSES*100) END AS MOVAVG_TOTSSE_RATIO,
                  
                  case when X.LAG1_NET_SLS <1 then 0 else ln(X.LAG1_NET_SLS) end - case when X.LAG2_NET_SLS <1 then 0 else ln(X.LAG2_NET_SLS) end as  DLOG_NET_SLS,
                  case when X.LAG1_FOL_SLS <1 then 0 else ln(X.LAG1_FOL_SLS) end - case when X.LAG2_FOL_SLS <1 then 0 else ln(X.LAG2_FOL_SLS) end as  DLOG_FOL_SLS,
                  case when X.LAG1_NET_JOB_SLS <1 then 0 else ln(X.LAG1_NET_JOB_SLS) end - case when X.LAG2_NET_JOB_SLS <1 then 0 else ln(X.LAG2_NET_JOB_SLS) end as  DLOG_NET_JOBSLS,
                  case when (case when X.LAG1_NET_SLS<0 then 0 else X.LAG1_NET_SLS end - case when X.LAG1_NET_NONBID_SLS <0 then 0 else X.LAG1_NET_NONBID_SLS end) <1 then 0 else ln(case when X.LAG1_NET_SLS<0 then 0 else X.LAG1_NET_SLS end - case when X.LAG1_NET_NONBID_SLS <0 then 0 else X.LAG1_NET_NONBID_SLS end) end - case when (case when X.LAG2_NET_SLS <0 then 0 else X.LAG2_NET_SLS end - case when X.LAG2_NET_NONBID_SLS<0 then 0 else X.LAG2_NET_NONBID_SLS end) <1 then 0 else ln(case when X.LAG2_NET_SLS <0 then 0 else X.LAG2_NET_SLS end - case when X.LAG2_NET_NONBID_SLS<0 then 0 else X.LAG2_NET_NONBID_SLS end) end as  DLOG_NET_BIDSLS,
                  case when (case when X.LAG1_FOL_SLS<0 then 0 else X.LAG1_FOL_SLS end - case when X.LAG1_FOL_NONBID_SLS<0 then 0 else X.LAG1_FOL_NONBID_SLS end ) <1 then 0 else ln(case when X.LAG1_FOL_SLS<0 then 0 else X.LAG1_FOL_SLS end - case when X.LAG1_FOL_NONBID_SLS<0 then 0 else X.LAG1_FOL_NONBID_SLS end) end - case when (case when X.LAG2_FOL_SLS<0 then 0 else X.LAG2_FOL_SLS end - case when X.LAG2_FOL_NONBID_SLS<0 then 0 else X.LAG2_FOL_NONBID_SLS end) <1 then 0 else ln(case when X.LAG2_FOL_SLS<0 then 0 else X.LAG2_FOL_SLS end - case when X.LAG2_FOL_NONBID_SLS<0 then 0 else X.LAG2_FOL_NONBID_SLS end) end as  DLOG_FOL_BIDSLS,
                  case when X.LAG1_FOL_JOB_SLS <1 then 0 else ln(X.LAG1_FOL_JOB_SLS) end - case when X.LAG2_FOL_JOB_SLS <1 then 0 else ln(X.LAG2_FOL_JOB_SLS) end as  DLOG_FOL_JOBSLS,
                  case when X.LAG1_FOL_LINES <1 then 0 else ln(X.LAG1_FOL_LINES) end - case when X.LAG2_FOL_LINES <1 then 0 else ln(X.LAG2_FOL_LINES) end as  DLOG_FOL_LINES,
                  case when X.LAG1_TOT_LINES <1 then 0 else ln(X.LAG1_TOT_LINES) end - case when X.LAG2_TOT_LINES <1 then 0 else ln(X.LAG2_TOT_LINES) end as  DLOG_TOT_LINES,
                  case when X.LAG1_TOT_SSES <1 then 0 else ln(X.LAG1_TOT_SSES) end - case when X.LAG2_TOT_SSES <1 then 0 else ln(X.LAG2_TOT_SSES) end as  DLOG_TOT_SSES,
                  case when (X.LAG1_TOT_SSES - X.LAG1_TOT_SEARCHES) <1 then 0 else ln((X.LAG1_TOT_SSES - X.LAG1_TOT_SEARCHES)) end - case when (X.LAG2_TOT_SSES - X.LAG2_TOT_SEARCHES) <1 then 0 else ln((X.LAG2_TOT_SSES - X.LAG2_TOT_SEARCHES)) end as  DLOG_HV_SSES,
                  
                  case when X.LAG1_NET_SLS <1 then 0 else LN(X.LAG1_NET_SLS) end LLAG1_NET_SLS, 
                  case when X.LAG2_NET_SLS <1 then 0 else LN(X.LAG2_NET_SLS) end LLAG2_NET_SLS, 
                  case when X.LAG1_FOL_SLS <1 then 0 else LN(X.LAG1_FOL_SLS) end LLAG1_FOL_SLS, 
                  case when X.LAG2_FOL_SLS <1 then 0 else LN(X.LAG2_FOL_SLS) end LLAG2_FOL_SLS,
                  
                  CASE WHEN X.LAG_VISITS <1 THEN 0 ELSE LN(X.LAG_VISITS) END  AS LLAG_VISITS,
                  CASE WHEN X.LAG_ACCOUNTS_PAYABLE >0 THEN 1 ELSE 0 END AS LAG_ACCOUNTS_PAYABLE,
                  CASE WHEN X.LAG_OLBP_BILLTRUST >0 THEN 1 ELSE 0 END AS LAG_OLBP_BILLTRUST,
                  CASE WHEN X.LAG_ORDER_INQUIRY >0 THEN 1 ELSE 0 END AS LAG_ORDER_INQUIRY,
                  CASE WHEN X.LAG_REQUEST_QUOTE >0 THEN 1 ELSE 0 END AS LAG_REQUEST_QUOTE,
                  CASE WHEN X.LAG_MY_LIST_ADDS >0 THEN 1 ELSE 0 END AS LAG_MY_LIST_ADDS,
                  CASE WHEN X.LAG_MY_LIST_VIEWS >0 THEN 1 ELSE 0 END AS LAG_MY_LIST_VIEWS,
                  CASE WHEN X.LAG_UPLOAD_SPREADSHEET >0 THEN 1 ELSE 0 END AS LAG_UPLOAD_SPREADSHEET,
                  CASE WHEN X.LAG_QUICK_ORDER >0 THEN 1 ELSE 0 END AS LAG_QUICK_ORDER,
                  CASE WHEN X.LAG_AVAILABILITY_CHECKS >0 THEN 1 ELSE 0 END AS LAG_AVAILABILITY_CHECKS,
                  CASE WHEN X.LAG_REDEEM_PRO_PLUS_POINTS >0 THEN 1 ELSE 0 END AS LAG_REDEEM_PRO_PLUS_POINTS,
                  CASE WHEN X.LAG_COPY_QUOTE >0 THEN 1 ELSE 0 END AS LAG_COPY_QUOTE,
                  CASE WHEN X.LAG_CHANGE_JOB_ACCOUNT >0 THEN 1 ELSE 0 END AS LAG_CHANGE_JOB_ACCOUNT,
                  

                  CASE
                  WHEN X.LAG1_YM_TOT>0 AND  X.LAG2_YM_TOT>0 AND  X.LAG3_YM_TOT>0 AND  X.LAG4_YM_TOT>0 AND  X.LAG5_YM_TOT>0 AND  X.LAG6_YM_TOT>0 AND  X.LAG7_YM_TOT>0 AND  X.LAG8_YM_TOT>0 AND  X.LAG9_YM_TOT>0 AND  X.LAG10_YM_TOT>0 AND  X.LAG11_YM_TOT>0 AND  X.LAG12_YM_TOT>0 AND  X.LAG13_YM_TOT>0 AND  X.LAG14_YM_TOT>0 AND  X.LAG15_YM_TOT>0 AND  X.LAG16_YM_TOT>0 AND  X.LAG17_YM_TOT>0 AND  X.LAG18_YM_TOT>0 AND  X.LAG19_YM_TOT>0 AND  X.LAG20_YM_TOT>0 AND  X.LAG21_YM_TOT>0 AND  X.LAG22_YM_TOT>0 AND  X.LAG23_YM_TOT>0 AND  X.LAG24_YM_TOT>0 THEN '24CONSEC' 
                  WHEN X.LAG1_YM_TOT>0 AND  X.LAG2_YM_TOT>0 AND  X.LAG3_YM_TOT>0 AND  X.LAG4_YM_TOT>0 AND  X.LAG5_YM_TOT>0 AND  X.LAG6_YM_TOT>0 AND  X.LAG7_YM_TOT>0 AND  X.LAG8_YM_TOT>0 AND  X.LAG9_YM_TOT>0 AND  X.LAG10_YM_TOT>0 AND  X.LAG11_YM_TOT>0 AND  X.LAG12_YM_TOT>0 AND  X.LAG13_YM_TOT>0 AND  X.LAG14_YM_TOT>0 AND  X.LAG15_YM_TOT>0 AND  X.LAG16_YM_TOT>0 AND  X.LAG17_YM_TOT>0 AND  X.LAG18_YM_TOT>0  THEN '18CONSEC' 
                  WHEN X.LAG1_YM_TOT>0 AND  X.LAG2_YM_TOT>0 AND  X.LAG3_YM_TOT>0 AND  X.LAG4_YM_TOT>0 AND  X.LAG5_YM_TOT>0 AND  X.LAG6_YM_TOT>0 AND  X.LAG7_YM_TOT>0 AND  X.LAG8_YM_TOT>0 AND  X.LAG9_YM_TOT>0 AND  X.LAG10_YM_TOT>0 AND  X.LAG11_YM_TOT>0 AND  X.LAG12_YM_TOT>0 THEN '12CONSEC'
                  WHEN X.LAG1_YM_TOT>0 AND  X.LAG2_YM_TOT>0 AND  X.LAG3_YM_TOT>0 AND  X.LAG4_YM_TOT>0 AND  X.LAG5_YM_TOT>0 AND  X.LAG6_YM_TOT>0 THEN '6CONSEC'
                  WHEN X.LAG1_YM_TOT>0 AND  X.LAG2_YM_TOT>0 AND  X.LAG3_YM_TOT>0  THEN '3CONSEC'
                  WHEN X.LAG1_YM_TOT>0 AND  X.LAG2_YM_TOT>0 THEN '2CONSEC'
                  WHEN X.LAG1_YM_TOT>0 THEN '1CONSEC'
                  ELSE '0CONSEC'
                  END TOT_MONTH_CONSEC,
                  CASE
                  WHEN X.LAG1_YM_FOL>0 AND  X.LAG2_YM_FOL>0 AND  X.LAG3_YM_FOL>0 AND  X.LAG4_YM_FOL>0 AND  X.LAG5_YM_FOL>0 AND  X.LAG6_YM_FOL>0 AND  X.LAG7_YM_FOL>0 AND  X.LAG8_YM_FOL>0 AND  X.LAG9_YM_FOL>0 AND  X.LAG10_YM_FOL>0 AND  X.LAG11_YM_FOL>0 AND  X.LAG12_YM_FOL>0 AND  X.LAG13_YM_FOL>0 AND  X.LAG14_YM_FOL>0 AND  X.LAG15_YM_FOL>0 AND  X.LAG16_YM_FOL>0 AND  X.LAG17_YM_FOL>0 AND  X.LAG18_YM_FOL>0 AND  X.LAG19_YM_FOL>0 AND  X.LAG20_YM_FOL>0 AND  X.LAG21_YM_FOL>0 AND  X.LAG22_YM_FOL>0 AND  X.LAG23_YM_FOL>0 AND  X.LAG24_YM_FOL>0 THEN '24CONSEC' 
                  WHEN X.LAG1_YM_FOL>0 AND  X.LAG2_YM_FOL>0 AND  X.LAG3_YM_FOL>0 AND  X.LAG4_YM_FOL>0 AND  X.LAG5_YM_FOL>0 AND  X.LAG6_YM_FOL>0 AND  X.LAG7_YM_FOL>0 AND  X.LAG8_YM_FOL>0 AND  X.LAG9_YM_FOL>0 AND  X.LAG10_YM_FOL>0 AND  X.LAG11_YM_FOL>0 AND  X.LAG12_YM_FOL>0 AND  X.LAG13_YM_FOL>0 AND  X.LAG14_YM_FOL>0 AND  X.LAG15_YM_FOL>0 AND  X.LAG16_YM_FOL>0 AND  X.LAG17_YM_FOL>0 AND  X.LAG18_YM_FOL>0  THEN '18CONSEC' 
                  WHEN X.LAG1_YM_FOL>0 AND  X.LAG2_YM_FOL>0 AND  X.LAG3_YM_FOL>0 AND  X.LAG4_YM_FOL>0 AND  X.LAG5_YM_FOL>0 AND  X.LAG6_YM_FOL>0 AND  X.LAG7_YM_FOL>0 AND  X.LAG8_YM_FOL>0 AND  X.LAG9_YM_FOL>0 AND  X.LAG10_YM_FOL>0 AND  X.LAG11_YM_FOL>0 AND  X.LAG12_YM_FOL>0 THEN '12CONSEC'
                  WHEN X.LAG1_YM_FOL>0 AND  X.LAG2_YM_FOL>0 AND  X.LAG3_YM_FOL>0 AND  X.LAG4_YM_FOL>0 AND  X.LAG5_YM_FOL>0 AND  X.LAG6_YM_FOL>0 THEN '6CONSEC'
                  WHEN X.LAG1_YM_FOL>0 AND  X.LAG2_YM_FOL>0 AND  X.LAG3_YM_FOL>0  THEN '3CONSEC'
                  WHEN X.LAG1_YM_FOL>0 AND  X.LAG2_YM_FOL>0 THEN '2CONSEC'
                  WHEN X.LAG1_YM_FOL>0 THEN '1CONSEC'
                  ELSE '0CONSEC'
                  END FOL_MONTH_CONSEC
                  
                  FROM
                  (
                      select
                      bch.YEARMONTH,
                      bch.MON, --MONTH_DIFFERENCES
                      --TO_NUMBER(SUBSTR(BCH.YEARMONTH,1,4)) YR, --YEAR_DIFFERENCES
                      FC.ZKEY,
                      max(Bch.TOTAL_USERS) TOTAL_USERS,
                      --FC.CUSTOMER_TYPE,
                      --FC.PRICE_COLUMN,
                      MAX(fc.DOM_TYPE_II) DOM_TYPE_II, --customer type differences
                      MAX(BCH.DIVISION_NAME) DIVISION_NAME, --geographic differences
                      MAX(NVL(fc.CREDIT_LIMIT,0)) CREDIT_LIMIT, --possible proxy for size
                      MAX(FC.OS_HA) OS_HA, --outside or house
                      /* ACTIVE_USERS LAGGED */
                      NVL(SUM(SUM(bch.TOTAL_USERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG_USERS,
                      NVL(SUM(SUM(bch.ACTIVE_USERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG_ACTIVE_USERS,
                      NVL(SUM(SUM(bch.ORDERING_USERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG_ORDERING_USERS,
                      
                      
                      /* HAS CUSTOMER EVER USED THING */
                      MAX(CASE WHEN BCH.FIRST_ACCOUNTS_PAYABLE >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_ACCTS_PAYABLE,
                      MAX(CASE WHEN BCH.FIRST_AVAILABILITY_CHECKS >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_AVAIL_CHECK,
                      MAX(CASE WHEN BCH.FIRST_COPY_QUOTE >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_COPY_QUOTE,
                      mAX(CASE WHEN BCH.FIRST_MY_LIST_ADDS >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_MY_LIST,
                      MAX(CASE WHEN BCH.FIRST_OLBP_BILLTRUST >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_OLBP,
                      MAX(CASE WHEN BCH.FIRST_ORDER_INQUIRY >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_ORDER_INQUIRE,
                      MAX(CASE WHEN BCH.FIRST_QUICK_ORDER >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_QUICK_ORDER,
                      MAX(CASE WHEN BCH.FIRST_REDEEM_PRO_PLUS_POINTS >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_REDEEM_PPP,
                      MAX(CASE WHEN BCH.FIRST_S2S_ORDER >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_S2S_ORDER,
                      MAX(CASE WHEN BCH.FIRST_UPLOAD_SPREADSHEET >= to_number(to_char(to_date(bch.YEARMONTH || '01', 'yyyymmdd') - numtoyminterval(1, 'month'), 'yyyymm')) THEN 1 ELSE 0 END) USED_UPLOAD_SPREADSHEET,
                      MAX(CASE WHEN TO_NUMBER(to_char(bch.PRO_PLUS_ACCEPTANCE_DATE,'YYYYMM')) >= to_number(to_char(bch.PRO_PLUS_ACCEPTANCE_DATE, 'yyyymm')) THEN 1 ELSE 0 END) ACCEPT_PRO_PLUS,
                      
                  
                  
                      
                      /*OTHER IMPORTANT VARS*/
                      MIN(CASE WHEN SUM(BCH.FOL_INVOICES) > 0 THEN TO_NUMBER(BCH.YEARMONTH) ELSE 9999999 END) OVER(PARTITION BY FC.ZKEY) MIN_YM_IN_SAMPLE,
                      MAX(CASE WHEN SUM(BCH.FOL_INVOICES) > 0 THEN TO_NUMBER(BCH.YEARMONTH) ELSE -9999999 END) OVER(PARTITION BY FC.ZKEY) MAX_YM_IN_SAMPLE,
                      
                      /*DEPENDENT VARIABLE SETUP - SHOULD BE ONLY VARIABLE NOT LAGGED*/
                      CASE WHEN SUM(BCH.FOL_INVOICES) > 1 THEN 1 ELSE 0 END FOL_CUSTOMER, --did customer purchase this month
                      CASE WHEN NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) > 0 THEN 1 ELSE 0 END AS LM_FOL_CUSTOMER,
                      
                      /*HISTORIC*/
                      NVL(SUM(COUNT(DISTINCT BCH.YEARMONTH)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN UNBOUNDED PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS HIST_MONTHS_TENURE, --counts total months customer has had any FEI activity (limit to 201008)
                      NVL(SUM(COUNT(DISTINCT CASE WHEN BCH.FOL_INVOICES > 0 THEN BCH.YEARMONTH END)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN UNBOUNDED PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS HIST_FOL_MON_TENURE, --counts total months customer has had any FEI activity (limit to 201008)
                      --NVL(SUM(SUM(BCH.NET_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN UNBOUNDED PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) HIST_NET_SLS,
                      --NVL(SUM(SUM(BCH.FOL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN UNBOUNDED PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) HIST_FOL_SLS, --total historic FOL sales
                      --NVL(SUM(SUM(BCH.TOTAL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN UNBOUNDED PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) HIST_TOT_LINES,
                      --NVL(SUM(SUM(BCH.FOL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN UNBOUNDED PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) HIST_FOL_LINES, --total historic FOL sales
                      
                      /* 12 MONTH ROLLING SALES LAGGED ONE MONTH - WILL NEVER KNOW CURRENT MONTH IN MODEL... CURRENT MONTH IS t + 1*/
                      NVL(SUM(COUNT(DISTINCT CASE WHEN BCH.TOTAL_ORDERS > 0 THEN BCH.YEARMONTH END)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS CNT_ROLLING_MONTHS,
                      NVL(SUM(SUM(BCH.NET_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS TOT_ROLLING_SLS,
                      NVL(SUM(SUM(BCH.MANUAL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS MAN_ROLLING_SLS,
                      NVL(SUM(SUM(BCH.NET_SALES)) OVER(PARTITION BY FC.PRICE_COLUMN ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_PC_TOT_SLS,
                      NVL(SUM(SUM(BCH.MANUAL_SALES)) OVER(PARTITION BY FC.PRICE_COLUMN ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_PC_MAN_SLS,
                      NVL(SUM(SUM(BCH.NET_JOB_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_NET_JOB_SLS,
                      NVL(SUM(SUM(BCH.FOL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_FOL_SLS,
                      NVL(SUM(SUM(BCH.NET_NONBID_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_NET_NONBID_SLS,
                      NVL(SUM(SUM(BCH.FOL_NONBID_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_FOL_NONBID_SLS,
                      NVL(SUM(SUM(BCH.FOL_JOB_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_FOL_JOB_SLS,
                      NVL(SUM(SUM(BCH.FOL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_FOL_LINES,
                      NVL(SUM(SUM(BCH.TOTAL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_TOT_LINES,
                      NVL(SUM(SUM(BCH.TOTAL_SSES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_TOT_SSES,
                      NVL(SUM(SUM(BCH.SEARCHES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS ROLLING_TOT_SEARCHES,
                      
                      /* MOVAVG 1 MONTH - 4 MONTHS AGO AVG - can take current month and divide by this month vars*/
                      ROUND(NVL(AVG(SUM(BCH.NET_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS TOT_MOVAVG_SLS,
                      ROUND(NVL(AVG(SUM(BCH.MANUAL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MAN_MOVAVG_SLS,
                      ROUND(NVL(AVG(SUM(BCH.NET_SALES)) OVER(PARTITION BY FC.PRICE_COLUMN ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_PC_TOT_SLS,
                      ROUND(NVL(AVG(SUM(BCH.MANUAL_SALES)) OVER(PARTITION BY FC.PRICE_COLUMN ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_PC_MAN_SLS,
                      ROUND(NVL(AVG(SUM(BCH.NET_JOB_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_NET_JOB_SLS,
                      ROUND(NVL(AVG(SUM(BCH.FOL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_FOL_SLS,
                      ROUND(NVL(AVG(SUM(BCH.NET_NONBID_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_NET_NONBID_SLS,
                      ROUND(NVL(AVG(SUM(BCH.FOL_NONBID_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_FOL_NONBID_SLS,
                      ROUND(NVL(AVG(SUM(BCH.FOL_JOB_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_FOL_JOB_SLS,
                      ROUND(NVL(AVG(SUM(BCH.FOL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_FOL_LINES,
                      ROUND(NVL(AVG(SUM(BCH.TOTAL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_TOT_LINES,
                      ROUND(NVL(AVG(SUM(BCH.TOTAL_SSES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_TOT_SSES,
                      ROUND(NVL(AVG(SUM(BCH.SEARCHES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0),2) AS MOVAVG_TOT_SEARCHES,
                      
                      
                      /* LAGGED VARIABLES */
                      NVL(SUM(SUM(BCH.NET_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_NET_SLS,
                      NVL(SUM(SUM(BCH.NET_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_NET_SLS,
                      NVL(SUM(SUM(BCH.FOL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_FOL_SLS,
                      NVL(SUM(SUM(BCH.FOL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_FOL_SLS,
                      NVL(SUM(SUM(BCH.MANUAL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_MAN_SLS,
                      NVL(SUM(SUM(BCH.MANUAL_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_MAN_SLS,
                      NVL(SUM(SUM(BCH.NET_JOB_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_NET_JOB_SLS,
                      NVL(SUM(SUM(BCH.NET_JOB_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_NET_JOB_SLS,
                      NVL(SUM(SUM(BCH.NET_NONBID_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_NET_NONBID_SLS,
                      NVL(SUM(SUM(BCH.NET_NONBID_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_NET_NONBID_SLS,
                      NVL(SUM(SUM(BCH.FOL_NONBID_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_FOL_NONBID_SLS,
                      NVL(SUM(SUM(BCH.FOL_NONBID_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_FOL_NONBID_SLS,
                      NVL(SUM(SUM(BCH.FOL_JOB_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_FOL_JOB_SLS,
                      NVL(SUM(SUM(BCH.FOL_JOB_SALES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_FOL_JOB_SLS,
                      NVL(SUM(SUM(BCH.FOL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_FOL_LINES,
                      NVL(SUM(SUM(BCH.FOL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_FOL_LINES,
                      NVL(SUM(SUM(BCH.TOTAL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_TOT_LINES,
                      NVL(SUM(SUM(BCH.TOTAL_LINES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_TOT_LINES,
                      NVL(SUM(SUM(BCH.TOTAL_SSES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_TOT_SSES,
                      NVL(SUM(SUM(BCH.TOTAL_SSES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_TOT_SSES,
                      NVL(SUM(SUM(BCH.SEARCHES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_TOT_SEARCHES,
                      NVL(SUM(SUM(BCH.SEARCHES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_TOT_SEARCHES,
                      /*LAGGED SC VARS*/
                      SUM(SUM(NVL(BCH.VISITS,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_VISITS,
                      SUM(SUM(NVL(BCH.ACCOUNTS_PAYABLE,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_ACCOUNTS_PAYABLE,
                      SUM(SUM(NVL(BCH.OLBP_BILLTRUST,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_OLBP_BILLTRUST,
                      SUM(SUM(NVL(BCH.ORDER_INQUIRY,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_ORDER_INQUIRY,
                      SUM(SUM(NVL(BCH.REQUEST_QUOTE,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_REQUEST_QUOTE,
                      SUM(SUM(NVL(BCH.MY_LIST_ADDS,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_MY_LIST_ADDS,
                      SUM(SUM(NVL(BCH.MY_LIST_VIEWS,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_MY_LIST_VIEWS,
                      SUM(SUM(NVL(BCH.UPLOAD_SPREADSHEET,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_UPLOAD_SPREADSHEET,
                      SUM(SUM(NVL(BCH.QUICK_ORDER,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_QUICK_ORDER,
                      SUM(SUM(NVL(BCH.AVAILABILITY_CHECKS,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_AVAILABILITY_CHECKS,
                      SUM(SUM(NVL(BCH.REDEEM_PRO_PLUS_POINTS,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_REDEEM_PRO_PLUS_POINTS,
                      SUM(SUM(NVL(BCH.COPY_QUOTE,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_COPY_QUOTE,
                      SUM(SUM(NVL(BCH.CHANGE_JOB_ACCOUNT,0))) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING) AS LAG_CHANGE_JOB_ACCOUNT,
                  
                      
                      
                      /* consecutive months hardcoded*/
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '3' MONTH PRECEDING),0) AS LAG3_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '4' MONTH PRECEDING AND INTERVAL '4' MONTH PRECEDING),0) AS LAG4_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '5' MONTH PRECEDING AND INTERVAL '5' MONTH PRECEDING),0) AS LAG5_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '6' MONTH PRECEDING AND INTERVAL '6' MONTH PRECEDING),0) AS LAG6_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '7' MONTH PRECEDING AND INTERVAL '7' MONTH PRECEDING),0) AS LAG7_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '8' MONTH PRECEDING AND INTERVAL '8' MONTH PRECEDING),0) AS LAG8_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '9' MONTH PRECEDING AND INTERVAL '9' MONTH PRECEDING),0) AS LAG9_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '10' MONTH PRECEDING AND INTERVAL '10' MONTH PRECEDING),0) AS LAG10_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '11' MONTH PRECEDING AND INTERVAL '11' MONTH PRECEDING),0) AS LAG11_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '12' MONTH PRECEDING),0) AS LAG12_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '13' MONTH PRECEDING AND INTERVAL '13' MONTH PRECEDING),0) AS LAG13_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '14' MONTH PRECEDING AND INTERVAL '14' MONTH PRECEDING),0) AS LAG14_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '15' MONTH PRECEDING AND INTERVAL '15' MONTH PRECEDING),0) AS LAG15_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '16' MONTH PRECEDING AND INTERVAL '16' MONTH PRECEDING),0) AS LAG16_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '17' MONTH PRECEDING AND INTERVAL '17' MONTH PRECEDING),0) AS LAG17_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '18' MONTH PRECEDING AND INTERVAL '18' MONTH PRECEDING),0) AS LAG18_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '19' MONTH PRECEDING AND INTERVAL '19' MONTH PRECEDING),0) AS LAG19_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '20' MONTH PRECEDING AND INTERVAL '20' MONTH PRECEDING),0) AS LAG20_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '21' MONTH PRECEDING AND INTERVAL '21' MONTH PRECEDING),0) AS LAG21_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '22' MONTH PRECEDING AND INTERVAL '22' MONTH PRECEDING),0) AS LAG22_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '23' MONTH PRECEDING AND INTERVAL '23' MONTH PRECEDING),0) AS LAG23_YM_TOT,
                      NVL(SUM(SUM(BCH.TOTAL_ORDERS)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '24' MONTH PRECEDING AND INTERVAL '24' MONTH PRECEDING),0) AS LAG24_YM_TOT,
                      
                      /*FOL CONSECUATIVE MONTHS*/
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND INTERVAL '1' MONTH PRECEDING),0) AS LAG1_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '2' MONTH PRECEDING AND INTERVAL '2' MONTH PRECEDING),0) AS LAG2_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND INTERVAL '3' MONTH PRECEDING),0) AS LAG3_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '4' MONTH PRECEDING AND INTERVAL '4' MONTH PRECEDING),0) AS LAG4_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '5' MONTH PRECEDING AND INTERVAL '5' MONTH PRECEDING),0) AS LAG5_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '6' MONTH PRECEDING AND INTERVAL '6' MONTH PRECEDING),0) AS LAG6_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '7' MONTH PRECEDING AND INTERVAL '7' MONTH PRECEDING),0) AS LAG7_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '8' MONTH PRECEDING AND INTERVAL '8' MONTH PRECEDING),0) AS LAG8_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '9' MONTH PRECEDING AND INTERVAL '9' MONTH PRECEDING),0) AS LAG9_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '10' MONTH PRECEDING AND INTERVAL '10' MONTH PRECEDING),0) AS LAG10_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '11' MONTH PRECEDING AND INTERVAL '11' MONTH PRECEDING),0) AS LAG11_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '12' MONTH PRECEDING AND INTERVAL '12' MONTH PRECEDING),0) AS LAG12_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '13' MONTH PRECEDING AND INTERVAL '13' MONTH PRECEDING),0) AS LAG13_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '14' MONTH PRECEDING AND INTERVAL '14' MONTH PRECEDING),0) AS LAG14_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '15' MONTH PRECEDING AND INTERVAL '15' MONTH PRECEDING),0) AS LAG15_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '16' MONTH PRECEDING AND INTERVAL '16' MONTH PRECEDING),0) AS LAG16_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '17' MONTH PRECEDING AND INTERVAL '17' MONTH PRECEDING),0) AS LAG17_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '18' MONTH PRECEDING AND INTERVAL '18' MONTH PRECEDING),0) AS LAG18_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '19' MONTH PRECEDING AND INTERVAL '19' MONTH PRECEDING),0) AS LAG19_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '20' MONTH PRECEDING AND INTERVAL '20' MONTH PRECEDING),0) AS LAG20_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '21' MONTH PRECEDING AND INTERVAL '21' MONTH PRECEDING),0) AS LAG21_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '22' MONTH PRECEDING AND INTERVAL '22' MONTH PRECEDING),0) AS LAG22_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '23' MONTH PRECEDING AND INTERVAL '23' MONTH PRECEDING),0) AS LAG23_YM_FOL,
                      NVL(SUM(SUM(BCH.FOL_INVOICES)) OVER(PARTITION BY FC.ZKEY ORDER BY to_date(BCH.YEARMONTH || '01', 'yyyymmdd') RANGE BETWEEN INTERVAL '24' MONTH PRECEDING AND INTERVAL '24' MONTH PRECEDING),0) AS LAG24_YM_FOL
                      
                      
                      from NORTH.BRANCH_CUSTOMER_HISTORY bch
                      JOIN (SELECT FC123.ACCOUNT_NAME||FC123.MAIN_CUSTOMER_NK ZKEY, MAX(fc123.DOM_TYPE_II) DOM_TYPE_II, MAX(FC123.DIVISION_NAME) DIVISION_NAME, MAX(NVL(fc123.CREDIT_LIMIT,0)) CREDIT_LIMIT, MAX(FC123.OS_HA) OS_HA, MAX(FC123.PRICE_COLUMN) PRICE_COLUMN FROM NORTH.FERGUSON_CUSTOMERS FC123 GROUP BY FC123.ACCOUNT_NAME||FC123.MAIN_CUSTOMER_NK) FC ON FC.ZKEY = BCH.ACCOUNT_NAME||BCH.MAIN_CUSTOMER_NK

                      WHERE BCH.FIRST_ORDER IS NOT NULL

                      GROUP BY
                      bch.YEARMONTH,
                      bch.MON,
                      FC.ZKEY,
                      --FC.CUSTOMER_TYPE,
                      FC.PRICE_COLUMN
                      --fc.FC_GK,
                      --fc.DOM_TYPE_II, --customer type differences
                      --fc.DIVISION_NAME, --geographic differences
                      --NVL(fc.CREDIT_LIMIT,0), --possible proxy for size
                      --FC.OS_HA --outside or house
                   ) X

)
a
where a.FILTER = 'KEEP'
and a.LLAG1_NET_SLS > 0
and a.LLAG1_FOL_SLS > 0
